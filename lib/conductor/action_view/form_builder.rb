# This is the form builder which is used for forms created with Helper#form_for_conductor.
class Conductor::ActionView::FormBuilder < ActionView::Helpers::FormBuilder
  
  # Iterates over each of the given records and yields a CollectionFormBuilder object used to build 
  # fields for that record. It also yields the record.
  #
  # For example, the following code:
  #
  #   <% form.fields_for_collection(:memberships, @club.memberships) do |fields, membership| %>
  #     <%= fields.check_box :fee_paid %>
  #     <%= membership.member_name %>
  #   <% end %>
  # 
  # Would render:
  # 
  #   <input type="checkbox" name="club[memberships][0][fee_paid]" value="1" checked="checked" /> Bob
  #   <input type="checkbox" name="club[memberships][1][fee_paid]" value="1" /> Harry
  #   <input type="checkbox" name="club[memberships][2][fee_paid]" value="1" /> Joe
  # 
  # The indexes <b>are not</b> the ids of the membership records - they are just autogenerated numbers
  # which differentiate each of the records in the POST data. So how does the id get passed? If you
  # don't specify it yourself, the id will be put into a hidden field just before the closing
  # <tt></form></tt> tag:
  # 
  #   <input type="hidden" name="club[memberships][0][id]" value="3" />
  #   <input type="hidden" name="club[memberships][1][id]" value="7" />
  #   <input type="hidden" name="club[memberships][2][id]" value="34" />
  #
  # If the form were submitted in the above state, we would get the following parameters:
  #
  #   params[:club][:memberships] = {
  #     "0" => { "id" => "3", "fee_paid" => "1" },
  #     "1" => { "id" => "7" },
  #     "2" => { "id" => "34" }
  #   }
  def fields_for_collection(name, records)
    raise ArgumentError, "No block given" unless block_given?
    
    # This ensures that records held by the conductor take precedence over records in the provided
    # collection, which allows us to maintain the state of the form if there are validation errors.
    # It depends on the association records having a sensible implementation of ==
    conductor_records = object.send(name).to_a
    records = records.map do |record|
      conductor_records.find { |conductor_record| record == conductor_record } || record
    end
    
    options = { :builder => Conductor::ActionView::CollectionFormBuilder, :collection => conductor_records }
    
    records.each_with_index do |record, i|
      @template.fields_for("#{object_name}[#{name}][#{i}]", record, options) do |fields|
        yield fields, record
        hidden_fields_for_end << fields.hidden_field(:id) unless fields.id_field_called?
      end
    end
  end
  
  # Iterates over the given records and yields a CollectionIdsFormBuilder object used to build an id
  # field for that record. It also yields the record.
  # 
  # For example, the following code:
  # 
  #   <% form.fields_for_collection_ids(:tag_ids, @post.tags) do |fields, tag| %>
  #     <%= fields.inclusion_check_box %>
  #     <%= fields.label %>
  #   <% end %>
  #
  # Would render:
  # 
  #   <input type="checkbox" name="post[tag_ids][]" value="41" id="post_tag_ids_41" />
  #   <label for="post_tag_ids_41">ruby</label>
  #   <input type="checkbox" name="post[tag_ids][]" value="3" id="post_tag_ids_3" checked="checked" />
  #   <label for="post_tag_ids_3">rails</label>
  #   <input type="checkbox" name="post[tag_ids][]" value="74" id="post_tag_ids_74" checked="checked" />
  #   <label for="post_tag_ids_74">java</label>
  # 
  # If the form were submitted in the above state, we would get the following parameters:
  #
  #   params[:post][:tag_ids] = ["3", "74"]
  def fields_for_collection_ids(collection_ids_name, records)
    raise ArgumentError, "No block given" unless block_given?
    
    records.each do |record|
      fields = Conductor::ActionView::CollectionIdsFormBuilder.new(self, collection_ids_name, record)
      yield fields, record
    end
  end
  
  def hidden_fields_for_end # :nodoc:
    @hidden_fields_for_end ||= []
  end
  
  def string_for_end # :nodoc:
    "<div style='margin:0;padding:0'>#{hidden_fields_for_end.join}</div>"
  end
end
